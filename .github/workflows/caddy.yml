on:
  push:
    paths:
      - 'version/caddy'

name: caddy
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup variables
        run: |
          echo "GOLANG=$(wget -qO- https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep 'version' | cut -d\" -f4 | head -1)" >> $GITHUB_ENV
          echo "VERSION=$(cat "version/caddy" | head -1 | tr -d [:space:])" >> $GITHUB_ENV
          echo "GOPATH=$(dirname $GITHUB_WORKSPACE)" >> $GITHUB_ENV
          echo "$(dirname $GITHUB_WORKSPACE)/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install Golang
        uses: actions/checkout@v5
        with: 
          go-version: ${{ env.GOLANG }}

      - name: Start build
        run: |
          cp src/build/caddy.sh $PWD/caddy.sh && chmod +x caddy.sh && ./caddy.sh

      - name: Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          draft: false
          prerelease: false
          allowUpdates: true
          artifacts: |
            ./release/*

  build-uot:
    runs-on: ubuntu-22.04
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup variables
        run: |
          echo "GOLANG=$(wget -qO- https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep 'version' | cut -d\" -f4 | head -1)" >> $GITHUB_ENV
          echo "VERSION=$(cat "version/caddy" | head -1 | tr -d [:space:])" >> $GITHUB_ENV
          echo "GOPATH=$(dirname $GITHUB_WORKSPACE)" >> $GITHUB_ENV
          echo "$(dirname $GITHUB_WORKSPACE)/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install Golang
        uses: actions/checkout@v5
        with: 
          go-version: ${{ env.GOLANG }}

      - name: Start build
        run: |
          cp src/build/caddy-uot.sh $PWD/caddy-uot.sh && chmod +x caddy-uot.sh && ./caddy-uot.sh

      - name: Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          draft: false
          prerelease: false
          allowUpdates: true
          artifacts: |
            ./release/*

  push:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup variables
        run: |
          echo "VERSION=$(cat "version/caddy" | head -1 | tr -d [:space:])" >> $GITHUB_ENV
        shell: bash

      - name: Get Dockerfile
        run: |
          cp src/caddy/* $PWD

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build latest
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/naiveproxy:latest
            ${{ secrets.DOCKER_USERNAME }}/naiveproxy:${{ env.VERSION }}

  push-uot:
    needs: build-uot
    runs-on: ubuntu-22.04
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup variables
        run: |
          echo "VERSION=$(cat "version/caddy" | head -1 | tr -d [:space:])" >> $GITHUB_ENV
        shell: bash

      - name: Get Dockerfile
        run: |
          cp src/caddy-uot/* $PWD

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build latest
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/naiveproxy:latest-uot
            ${{ secrets.DOCKER_USERNAME }}/naiveproxy:${{ env.VERSION }}-uot

  test:
    needs: [push,push-uot]
    runs-on: ubuntu-22.04
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup variables
        run: |
          echo "VERSION=$(cat "version/caddy" | head -1 | tr -d [:space:])" >> $GITHUB_ENV
        shell: bash

      - name: Test Docker image
        run: |
          docker run --rm --entrypoint /usr/bin/caddy ${{ secrets.DOCKER_USERNAME }}/naiveproxy:latest version
          docker run --rm --entrypoint /usr/bin/caddy ${{ secrets.DOCKER_USERNAME }}/naiveproxy:${{ env.VERSION }} version
          docker run --rm --entrypoint /usr/bin/caddy ${{ secrets.DOCKER_USERNAME }}/naiveproxy:latest-uot version
          docker run --rm --entrypoint /usr/bin/caddy ${{ secrets.DOCKER_USERNAME }}/naiveproxy:${{ env.VERSION }}-uot version
